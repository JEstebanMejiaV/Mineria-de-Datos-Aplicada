str(iris)
attach(iris) # Separar as variabes de data.frame original
# (poner iris en el search path)
## Un poco de exploracion :
# Graficos de dispersiÃ³n
plot(Sepal.Width~Sepal.Length, col=Species)
plot(Sepal.Length, Sepal.Width,col=Species,pch=as.numeric(Species))
library(MASS)
parcoord(Iris[1:4], col=iris$Species,var.label=T)
parcoord(iris[1:4], col=iris$Species,var.label=T)
KM.Iris<-kmeans(iris[1:4], 3,iter.max=1000,
algorithm = c("Lloyd") )
KM.Iris <- kmeans(iris[1:4], 3,iter.max=1000, algorithm = c("Lloyd") )
KM.Iris$size
KM.Iris$centers
table(Iris$Species,KM.Iris$cluster)
table(iris$Species,KM.Iris$cluster)
aggregate(x = iris, by = list(KM.Iris), FUN = mean)
aggregate(x = iris, by = list(KM.Iris$cluster), FUN = mean)
aggregate(x = iris[-4], by = list(KM.Iris$cluster), FUN = mean)
aggregate(x = iris[,-4], by = list(KM.Iris$cluster), FUN = mean)
aggregate(x = iris[,-5], by = list(KM.Iris$cluster), FUN = mean)
seg.summ <- function(data, groups) {
aggregate(data, list(groups), function(x) mean(as.numeric(x)))
}
seg.summ(iris, KM.Iris$cluster)
if(!require(scatterplot3d, quietly = TRUE))install.packages("scatterplot3d")
if(!require(scatterplot3d, quietly = TRUE))install.packages("scatterplot3d")
Iris.dist <- dist(Iris[1:4])
Iris.mds <- cmdscale(Iris.dist)
Iris.dist <- dist(iris[1:4])
Iris.mds <- cmdscale(iris)
par(mfrow = c(1, 2))
# Cargar e instalar el paquete de  scatterplot3d para graficos 3D
if(!require(scatterplot3d, quietly = TRUE))install.packages("scatterplot3d")
library("scatterplot3d")
# Decarar los puntos como caracteres 1, 2, 3
chars <- c("1", "2", "3")[as.integer(iris$Species)]
g3d=scatterplot3d(Iris.mds,pch=chars)
g3d$points3d(Iris.mds,col=KM.Iris$cluster,pch=chars)
## Traducir a dos dimensiones usando escalamiento mutidimensional
Iris.dist <- dist(iris[1:4])
Iris.mds <- cmdscale(iris)
# Graficar los punto en el espacio de dos dimensiones
par(mfrow = c(1, 2))
# Cargar e instalar el paquete de  scatterplot3d para graficos 3D
if(!require(scatterplot3d, quietly = TRUE))install.packages("scatterplot3d")
library("scatterplot3d")
# Decarar los puntos como caracteres 1, 2, 3
chars <- c("1", "2", "3")[as.integer(iris$Species)]
# Graficar en 3d
g3d <- scatterplot3d(Iris.mds,pch = chars)
g3d$points3d(Iris.mds,col = KM.Iris$cluster,pch = chars)
# Graficar en 2d
plot(Iris.mds, col = KM.Iris$cluster, pch = chars, xlab = "indice", ylab = "Y")
# Adiccionar la variabe "custer" a el conjunto de datos original
Iris.Cluster<-cbind(Iris,KM.Iris[1])
head(Iris.Cluster[3:6])
Iris.dist <- dist(iris[1:4])
Iris.mds <- cmdscale(iris)
Iris.mds <- cmdscale(Iris.dist)
# Graficar los punto en el espacio de dos dimensiones
par(mfrow = c(1, 2))
# Cargar e instalar el paquete de  scatterplot3d para graficos 3D
if(!require(scatterplot3d, quietly = TRUE))install.packages("scatterplot3d")
library("scatterplot3d")
# Decarar los puntos como caracteres 1, 2, 3
chars <- c("1", "2", "3")[as.integer(iris$Species)]
# Graficar en 3d
g3d <- scatterplot3d(Iris.mds,pch = chars)
g3d$points3d(Iris.mds,col = KM.Iris$cluster,pch = chars)
plot(Iris.mds, col = KM.Iris$cluster, pch = chars, xlab = "indice", ylab = "Y")
Iris.Cluster<-cbind(iris,KM.Iris[1])
head(Iris.Cluster[3:6])
SSE = rep(0, 30)
for (k in 1:30) {
set.seed(42)
grupos = kmeans(iris[1:4], k)
SSE[k] = grupos$tot.withinss
}
par(mfrow = c(1, 1))
#
plot(SSE, col = "red", type = "b")
plot(SSE, col = "navy", type = "b")
SSE = c()
for (k in 1:30) {
set.seed(42)
grupos = kmeans(iris[1:4], k)
SSE[k] = grupos$tot.withinss
}
par(mfrow = c(1, 1))
#
plot(SSE, col = "navy", type = "b")
wssplot <- function(data, nc=15, seed=1234){
SSE = c()
for (k in 1:nc) {
set.seed(42)
grupos = kmeans(data, k)
SSE[k] = grupos$tot.withinss
plot(SSE, col = "navy", type = "b",xlab = '# de Clusters',
ylab = 'Suma cuadratica dentro de los grupos')
}
}
wssplot(iris[,1:4], nc=6)
wssplot <- function(data, nc=15, seed=1234){
SSE = c()
for (k in 1:nc) {
set.seed(seed)
grupos = kmeans(data, k)
SSE[k] = grupos$tot.withinss
plot(SSE, col = "navy", type = "b",xlab = '# de Clusters',
ylab = 'Suma cuadratica dentro de los grupos')
}
}
par(mfrow = c(1, 1))
wssplot(iris[,1:4], nc = 6)
wssplot(iris[,1:4], nc = 15)
wssplot(iris[,1:4], nc = 15)
wssplot(iris[1:4], nc = 15)
nc = 15
seed=1234
nc = 15
seed=1234
SSE = c()
for (k in 1:nc) {
set.seed(seed)
grupos = kmeans(iris[1:4], k)
SSE[k] = grupos$tot.withinss
plot(SSE, col = "navy", type = "b",xlab = '# de Clusters',
ylab = 'Suma cuadratica dentro de los grupos')
}
SSE = c()
for (k in 1:nc) {
set.seed(seed)
grupos = kmeans(iris[1:4], k)
SSE[k] = grupos$tot.withinss
}
plot(SSE, col = "navy", type = "b",xlab = '# de Clusters',
ylab = 'Suma cuadratica dentro de los grupos')
wssplot <- function(data, nc=15, seed=1234){
SSE = c()
for (k in 1:nc) {
set.seed(seed)
grupos = kmeans(data, k)
SSE[k] = grupos$tot.withinss
}
plot(SSE, col = "navy", type = "b",xlab = '# de Clusters',
ylab = 'Suma cuadratica dentro de los grupos')
}
wssplot <- function(data, nc=15, seed=1234){
SSE = c()
for (k in 1:nc) {
set.seed(seed)
grupos = kmeans(data, k)
SSE[k] = grupos$tot.withinss
}
plot(SSE, col = "navy", type = "b",xlab = '# de Clusters',
ylab = 'Suma cuadratica dentro de los grupos')
}
wssplot(iris[1:4], nc = 15)
wssplot(iris[1:4], nc = 20)
wssplot <- function(data, nc=15, seed=1234){
SSE = c()
for (k in 1:nc) {
set.seed(seed)
grupos = kmeans(data, k)
SSE[k] = grupos$tot.withinss
}
plot(SSE, col = "navy", type = "b",xlab = '# de Clusters',ylab = 'Suma cuadratica dentro de los grupos')
}
par(mfrow = c(1, 1))
wssplot(iris[1:4], nc = 15)
wssplot <- function(data, nc=15, seed=1234){
SSE = c()
for (k in 1:nc) {
set.seed(seed)
grupos = kmeans(data, k)
SSE[k] = grupos$tot.withinss
}
plot(SSE, col = "navy", type = "b",xlab = '# de Clusters',
ylab = 'Suma cuadratica dentro de los grupos')
}
par(mfrow = c(1, 1))
wssplot(iris[1:4], nc = 15)
wssplot <- function(data, nc=15, seed=1234){
SSE = c()
for (k in 1:nc) {
set.seed(seed)
grupos = kmeans(data, k)
SSE[k] = grupos$tot.withinss
}
plot(SSE, col = "navy", type = "b",xlab = '# de Clusters',
ylab = 'Suma cuadratica')
}
par(mfrow = c(1, 1))
wssplot(iris[1:4], nc = 15)
wssplot <- function(data, nc=15, seed=1234){
SSE = c()
for (k in 1:nc) {
set.seed(seed)
grupos = kmeans(data, k)
SSE[k] = grupos$tot.withinss
}
plot(SSE, col = "navy", type = "b",xlab = '# de Clusters',
ylab = 'Suma cuadratica')
}
wssplot(iris[1:4], nc = 15)
wssplot <- function(data, nc=15, seed=1234){
SSE = c()
for (k in 1:nc) {
set.seed(seed)
grupos = kmeans(data, k)
SSE[k] = grupos$tot.withinss
}
plot(SSE, col = "navy", type = "b",xlab = '# de Clusters',
ylab = 'Suma cuadratica dentro de los grupos')
}
wssplot(iris[1:4], nc = 15)
# Un  acercamiento a la definición
# de numero de custers
# Geraración de loop para asignar
wssplot <- function(data, nc=15, seed=1234){
SSE = c()
for (k in 1:nc) {
set.seed(seed)
grupos = kmeans(data, k)
SSE[k] = grupos$tot.withinss
}
plot(SSE, col = "navy", type = "b",xlab = '# de Clusters',
ylab = 'Suma cuadratica dentro de los grupos')
}
par(mfrow = c(1, 1))
wssplot(iris[1:4], nc = 15)
wssplot <- function(data, nc=15, seed=1234){
SSE = c()
for (k in 1:nc) {
set.seed(seed)
grupos = kmeans(data, k)
SSE[k] = grupos$tot.withinss
}
plot(SSE, col = "navy", type = "b",xlab = '# de Clusters',
ylab = 'Suma cuadratica dentro de los grupos')
}
wssplot <- function(data, nc=15, seed=1234){
SSE = c()
for (k in 1:nc) {
set.seed(seed)
grupos = kmeans(data, k)
SSE[k] = grupos$tot.withinss
}
plot(SSE, col = "navy", type = "b",xlab = '# de Clusters',
ylab = 'Suma cuadratica dentro de los grupos')
}
par(mfrow = c(1, 1))
wssplot(iris[1:4], nc = 15)
wssplot <- function(data, nc=15, seed=1234){
SSE = c()
for (k in 1:nc) {
set.seed(seed)
grupos = kmeans(data, k)
SSE[k] = grupos$tot.withinss
}
plot(SSE, col = "navy", type = "b",xlab = '# de Clusters',
ylab = 'Suma cuadratica dentro de los grupos')
}
par(mfrow = c(1, 1))
wssplot(iris[1:4], nc = 15)
wssplot <- function(data, nc=15, seed=1234){
SSE = c()
for (k in 1:nc) {
set.seed(seed)
grupos = kmeans(data, k)
SSE[k] = grupos$tot.withinss
}
plot(SSE, col = "navy", type = "b",xlab = '# de Clusters',
ylab = 'Suma cuadratica dentro de los grupos')
}
par(mfrow = c(1, 1))
wssplot(iris[1:4], nc = 15)
abline(v = 3, col = "black", lty = 14)
text(4, 60, "3 Clusters", col = "black", adj = c(0, -0.1), cex = 0.7)
wssplot <- function(data, nc=15, seed=1234){
SSE = c()
for (k in 1:nc) {
set.seed(seed)
grupos = kmeans(data, k)
SSE[k] = grupos$tot.withinss
}
plot(SSE, col = "navy", type = "b",xlab = '# de Clusters',
ylab = 'Suma cuadratica dentro de los grupos')
}
par(mfrow = c(1, 1))
wssplot(iris[1:4], nc = 15)
# Mejorar grafica
abline(v = 3, col = "black", lty = 14)
text(4, 60, "3 Clusters", col = "black", adj = c(0, -0.1), cex = 0.7)
Lloyd <- 0
MacQueen <- 0
Hartigan <- 0
Forgy <- 0
set.seed(123)
for (i in 1:5000) {
KM <- kmeans(iris[1:4], 3, iter.max = 1000, algorithm = "Hartigan-Wong")
Hartigan <- Hartigan + KM$betweenss
KM <- kmeans(iris[1:4], 3, iter.max = 1000, algorithm = "Lloyd")
Lloyd <- Lloyd + KM$betweenss
KM <- kmeans(iris[1:4], 3, iter.max = 1000, algorithm = "Forgy")
Forgy <- Forgy + KM$betweenss
KM <- kmeans(iris[1:4], 3, iter.max = 1000, algorithm = "MacQueen")
MacQueen <- MacQueen + KM$betweenss
}
Metodo <- c("Hartigan-Wong", "Lloyd", "Forgy", "MacQueen")
Resultados <- as.data.frame(round(c(Hartigan, Lloyd, Forgy,
MacQueen)/5000, 2))
Resultados <- cbind(Metodo, Resultados)
names(Resultados) <- c("Metodo", "Intermediación")
Resultados
KmAlgo <- function(data, k=3, nc=500 ) {
Lloyd <- 0
MacQueen <- 0
Hartigan <- 0
Forgy <- 0
set.seed(123)
for (i in 1:nc) {
KM <- kmeans(data, k, iter.max = 1000, algorithm = "Hartigan-Wong")
Hartigan <- Hartigan + KM$betweenss
KM <- kmeans(data, k, iter.max = 1000, algorithm = "Lloyd")
Lloyd <- Lloyd + KM$betweenss
KM <- kmeans(data, k, iter.max = 1000, algorithm = "Forgy")
Forgy <- Forgy + KM$betweenss
KM <- kmeans(data, k, iter.max = 1000, algorithm = "MacQueen")
MacQueen <- MacQueen + KM$betweenss
}
Metodo <- c("Hartigan-Wong", "Lloyd", "Forgy", "MacQueen")
Resultados <- as.data.frame(round(c(Hartigan, Lloyd, Forgy,
MacQueen)/5000, 2))
Resultados <- cbind(Metodo, Resultados)
names(Resultados) <- c("Metodo", "Intermediación")
Resultados
}
KmAlgo(iris[1:4])
KmAlgo <- function(data, k=3, nc=500 ) {
Lloyd <- 0
MacQueen <- 0
Hartigan <- 0
Forgy <- 0
set.seed(123)
for (i in 1:nc) {
KM <- kmeans(data, k, iter.max = 1000, algorithm = "Hartigan-Wong")
Hartigan <- Hartigan + KM$betweenss
KM <- kmeans(data, k, iter.max = 1000, algorithm = "Lloyd")
Lloyd <- Lloyd + KM$betweenss
KM <- kmeans(data, k, iter.max = 1000, algorithm = "Forgy")
Forgy <- Forgy + KM$betweenss
KM <- kmeans(data, k, iter.max = 1000, algorithm = "MacQueen")
MacQueen <- MacQueen + KM$betweenss
}
Metodo <- c("Hartigan-Wong", "Lloyd", "Forgy", "MacQueen")
Resultados <- as.data.frame(round(c(Hartigan, Lloyd, Forgy,
MacQueen)/nc, 2))
Resultados <- cbind(Metodo, Resultados)
names(Resultados) <- c("Metodo", "Intermediación")
Resultados
}
KmAlgo(iris[1:4])
if (!require(cluster, quietly=TRUE)) install.packages("cluster")
clusplot(iris[1:4], KM$cluster, color = TRUE, shade = TRUE,
labels = 2, lines = 1,main = 'Análisis de clúster para Iris')
clusplot(iris[1:4], KM$cluster, color = TRUE, shade = TRUE,
labels = 2, lines = 1,main = 'Análisis de clúster para Iris')
clusplot(iris[1:4], KM$cluster, color = TRUE, shade = TRUE,
labels = 2, lines = 1,main = 'Análisis de clúster para Iris')
if (!require(HSAUR,quietly = TRUE)) install.packages("HSAUR")
if (!require(cluster,quietly = TRUE)) install.packages("cluster")
library("HSAUR")
library("cluster")
KM <- kmeans(iris[1:4], 3, iter.max = 1000, algorithm = "Hartigan-Wong")
# Calculo de la matriz de disimilariedad
diss <- daisy(iris[1:4])
dE2 <- diss^2
if (!require(d3heatmap, quietly = TRUE)) install.packages("d3heatmap")
library(d3heatmap) # Libreria para heat map interactivos
heatmap(as.matrix(diss))
d3heatmap(diss,  dendrogram = "none")
Sil <- silhouette(KM$cl, diss)
par(mfrow = c(1, 1))
plot(Sil, col = c("red", "green", "blue"))
par(mfrow = c(1, 1))
plot(Sil, col = c("red", "green", "blue"))
Sil <- silhouette(KM$cl, diss)
par(mfrow = c(1, 1))
plot(Sil, col = c("red", "green", "blue"))
library(NbClust)
if(!require(NbClust, quietly = TRUE))install.packages("NbClust")
library(NbClust)
library(NbClust)
nb <- NbClust(scale(iris[, 1:4]), distance = "euclidean", min.nc = 2,
max.nc = 10, method = "complete", index = "all")
table(names(nb$Best.nc[1,]), nb$Best.nc[1,])
par(mfrow = c(1, 1))
barplot(table(nb$Best.nc[1,]), border = "blue",
density = c(90, 70, 50, 40, 30, 20, 10))
nb <- NbClust(scale(iris[, 1:4]), distance = "euclidean", min.nc = 2,
max.nc = 10, method = "complete", index = "all")
table(names(nb$Best.nc[1,]), nb$Best.nc[1,])
par(mfrow = c(1, 1))
barplot(table(nb$Best.nc[1,]), border = "blue",
density = c(90, 70, 50, 40, 30, 20, 10))
nb <- NbClust(scale(iris[, 1:4]), distance = "euclidean", min.nc = 2,
max.nc = 10, method = "complete", index = "all")
table(names(nb$Best.nc[1,]), nb$Best.nc[1,])
par(mfrow = c(1, 1))
barplot(table(nb$Best.nc[1,]), border = "blue",
density = c(90, 70, 50, 40, 30, 20, 10))
diss <- daisy( iris[1:4] )
diss2 <- diss^2
# Calculo de silueta
Sil <- silhouette(KM.Iris$cl, diss2)
Sil
par(mfrow = c(1, 1))
plot(Sil, col = c("red", "green", "blue"))
nb <- NbClust(scale(iris[, 1:4]), distance = "euclidean", min.nc = 2,
max.nc = 10, method = "complete", index = "all")
asw <- numeric(nrow(iris[,-5]))
asw
for (k in 2:(nrow(iris[,-5])-1)) {
sil <- silhouette(KM.Iris$cl, diss2)
asw[k] <- summary(sil)$avg.width
}
k.best <- which.max(asw)
windows(title = "Silhouettes - Ward - k = 2 to n-1")
plot(1:nrow(iris[,-5]), asw, type = "h",
main = "Silhouette-optimal number of clusters, Ward",
xlab = "k (number of groups)", ylab ="Average silhouette width")
axis(1, k.best, paste("optimum",k.best,sep = "\n"), col = "red", font=2,
col.axis = "red")
points(k.best, max(asw), pch=16, col="red", cex = 1.5)
cat("", "Silhouette-optimal number of clusters k =", k.best, "\n",
"with an average silhouette width of", max(asw), "\n")
k.best <- which.max(asw)
plot(1:nrow(iris[,-5]), asw, type = "h",
main = "Silhouette-optimal number of clusters, Ward",
xlab = "k (number of groups)", ylab ="Average silhouette width")
axis(1, k.best, paste("optimum",k.best,sep = "\n"), col = "red", font=2,
col.axis = "red")
points(k.best, max(asw), pch=16, col="red", cex = 1.5)
cat("", "Silhouette-optimal number of clusters k =", k.best, "\n",
"with an average silhouette width of", max(asw), "\n")
par(mfrow = c(1, 1))
par(mfrow = c(1, 1))
asw <- numeric(nrow(iris[,-5]))
for (k in 2:(nrow(iris[,-5]) - 1)) {
sil <- silhouette(KM.Iris$cl, diss2)
asw[k] <- summary(sil)$avg.width
}
k.best <- which.max(asw)
plot(1:nrow(iris[,-5]), asw, type = "h",
main = "Silhouette-optimal number of clusters, Ward",
xlab = "k (number of groups)", ylab ="Average silhouette width")
axis(1, k.best, paste("optimum",k.best,sep = "\n"), col = "red", font=2,
col.axis = "red")
points(k.best, max(asw), pch=16, col="red", cex = 1.5)
cat("", "Silhouette-optimal number of clusters k =", k.best, "\n",
"with an average silhouette width of", max(asw), "\n")
asw <- numeric(nrow(iris[,-5]))
for (k in 1:(nrow(iris[,-5]) - 1)) {
sil <- silhouette(KM.Iris$cl, diss2)
asw[k] <- summary(sil)$avg.width
}
k.best <- which.max(asw)
plot(1:nrow(iris[,-5]), asw, type = "h",
main = "Número de Clústers basados en silueta",
xlab = "k (Numero de Grupos)", ylab = "Amplitud de la silueta promedio")
axis(1, k.best, paste("optimum",k.best,sep = "\n"), col = "red", font = 2,
col.axis = "red")
points(k.best, max(asw), pch = 16, col = "red", cex = 1.5)
cat("", "Silhouette-optimal number of clusters k =", k.best, "\n",
"with an average silhouette width of", max(asw), "\n")
asw <- numeric(nrow(iris[,-5]))
for (k in 1:(nrow(iris[,-5]) - 1)) {
sil <- silhouette(KM.Iris$cl, diss2)
asw[k] <- summary(sil)$avg.width
}
k.best <- which.max(asw)
plot(1:nrow(iris[,-5]), asw, type = "h",
main = "Número de Clústers basados en silueta",
xlab = "k (Numero de Grupos)", ylab = "Amplitud de la silueta promedio")
axis(1, k.best, paste("optimum",k.best,sep = "\n"), col = "red", font = 2,
col.axis = "red")
points(k.best, max(asw), pch = 16, col = "red", cex = 1.5)
cat("", "Número de Clústers basados en silueta k =", k.best, "\n",
"Con una amplitud de silueta promedio de ", max(asw), "\n")
